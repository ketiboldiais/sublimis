export const className = {
	binaryTree: {
		canvas: "binaryTree",
		arrowURL: "binaryTreeArrow",
		edgeGroup: "binaryTreeEdgeGroup",
		edge: "binaryTreeEdge",
		nodeGroup: "binaryTreeNodeGroup",
		node: "binaryTreeNode",
		leaf: "binaryTreeLeaf",
		leafText: "binaryTreeLeafText",
		branch: "binaryTreeBranchNode",
		branchText: "binaryTreeBranchText",
		textGroup: "binaryTreeTextGroup",
		levelTextGroup: "binaryTreeLevels",
		depthTextGroup: "binaryTreeDepths",
		heightTextGroup: "binaryTreeHeights",
		balanceFactorTextGroup: "binaryTreeBalanceFactors",
	},
	tree: {
		canvas: "tree",
		arrowURL: "treeArrow",
		edgeGroup: "treeEdges",
		edge: "treeEdge",
		nodeGroup: "treeNodes",
		node: "treeNode",
		leaf: "treeLeaf",
		leafText: "treeLeafText",
		branch: "treeBranchNode",
		branchText: "treeBranchText",
		textGroup: "treeTextGroup",
		levelTextGroup: "treeLevels",
		depthTextGroup: "treeDepths",
		heightTextGroup: "treeHeights",
		balanceFactorTextGroup: "treeBalanceFactors",
		annotations: "treeAnnotations",
	},
	sequence: {
		canvas: "sequence",
		element: "sequenceElement",
		text: "SequenceText",
		elementText: "sequenceElementText",
		indexText: "sequenceIndexText",
		annotationText: "sequenceAnnotationText",
	},
	matrix: {
		canvas: "matrix",
		element: "matrixElement",
		row: "matrixRow",
		column: "matrixColumn",
		text: "matrixElementText",
		columnIndex: "matrixColumnIndex",
		rowIndex: "matrixRowIndex",
	},
	linkedList: {
		canvas: "linkedList",
		node: "linkedListNode",
		link: "linkedListLink",
		arrowURL: "linkedListArrow",
		dataField: "linkedListDataField",
		nextField: "linkedListNextField",
		index: "linkedListIndex",
		annotation: "linkedListAnnotation",
	},
	doublyLinkedList: {
		canvas: "doublyLinkedList",
		node: "doublyLinkedListNode",
		link: "doublyLinkedListLink",
		nextLink: "doublyLinkedListNextLink",
		nextArrow: "doublyLinkedListNextArrow",
		prevLink: "doublyLinkedListPrevLink",
		prevArrow: "doublyLinkedListPrevArrow",
		dataField: "doublyLinkedListDataField",
		nextField: "doublyLinkedListNextField",
		prevField: "doublyLinkedListPrevField",
		index: "doublyLinkedListIndex",
		annotation: "doublyLinkedListAnnotation",
	},
	circularList: {
		canvas: "circularList",
		node: "circularListNode",
		root: "circularListRoot",
		link: "circularListLink",
		arrow: "circularListArrow",
		dataField: "circularListDataField",
		nextField: "circularListNextField",
		annotation: "circularListAnnotation",
		index: "circularListIndex",
	},
	stack: {
		canvas: "stack",
		frame: "stackFrame",
		index: "stackFrameIndex",
	},
	queue: {
		canvas: "queue",
		queuer: "queuer",
		index: "queuerIndex",
		annotation: "queueAnnotation",
	},
	circularQueue: {
		canvas: "circularQueue",
		queuer: "circularQueuer",
		index: "circularQueuerIndex",
		annotation: "circularQueuerAnnotation",
	},
};
